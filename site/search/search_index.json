{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"secrets-management/","title":"Secrets Management","text":""},{"location":"secrets-management/#environment-variables","title":"Environment Variables","text":"<ul> <li>Store secrets in <code>.env</code> (never commit it)</li> <li>Example keys: <code>API_KEY</code>, <code>FIREBASE_URL</code></li> </ul>"},{"location":"secrets-management/#github-actions","title":"GitHub Actions","text":"<ul> <li>Use GitHub Secrets for CI/CD</li> </ul>"},{"location":"secrets-management/#best-practices","title":"Best Practices","text":"<ul> <li>Rotate keys regularly</li> <li>Never hard-code credentials</li> </ul>"},{"location":"architecture/architecture/","title":"Architecture Overview","text":""},{"location":"architecture/architecture/#static-view","title":"Static View","text":"<p>Shows the system\u2019s structure at rest. List the main modules, services, or libraries, the APIs they expose, and the compile-time or package-time dependencies between them. A reviewer should be able to see which parts can be replaced independently and where tight coupling may cause ripple effects.</p>"},{"location":"architecture/architecture/#dynamic-view","title":"Dynamic View","text":"<p>Captures the behaviour of the system during a single, meaningful scenario (e.g., \u201cuser searches the gallery\u201d). It traces the exact order of calls, data formats, error paths, and latency-critical hops across objects or services. This helps spot race conditions, redundant round-trips, and security gaps.</p>"},{"location":"architecture/architecture/#deployment-view","title":"Deployment View","text":"<p>Describes the runtime topology: which containers/services run on which nodes, what networks and ports connect them, and which cloud resources are involved (DB, queue, CDN, secrets store, etc.). Include redundancy (replicas, zones) and scaling units, so Ops can gauge fault tolerance and cost.</p>"},{"location":"architecture/architecture/#tech-stack","title":"Tech Stack","text":"<ul> <li>Flutter (Dart)</li> <li>React</li> <li>Python</li> <li>Firebase</li> <li>GitHub Actions</li> </ul>"},{"location":"automation/continuous-delivery/","title":"Continuous Deployment","text":""},{"location":"automation/continuous-delivery/#deployment-targets","title":"Deployment Targets","text":"<ul> <li>Firebase Hosting</li> </ul>"},{"location":"automation/continuous-delivery/#trigger","title":"Trigger","text":"<ul> <li>Push to <code>main</code></li> </ul>"},{"location":"automation/continuous-delivery/#tools","title":"Tools","text":"<ul> <li>GitHub Actions</li> </ul>"},{"location":"automation/continuous-delivery/#safety","title":"Safety","text":"<ul> <li>Manual approval required</li> </ul>"},{"location":"automation/continuous-integration/","title":"Continuous Integration","text":""},{"location":"automation/continuous-integration/#tools","title":"Tools","text":"<ul> <li>GitHub Actions</li> </ul>"},{"location":"automation/continuous-integration/#what-it-does","title":"What it Does","text":"<ul> <li>Linting</li> <li>Testing</li> <li>Build Check</li> </ul>"},{"location":"automation/continuous-integration/#example","title":"Example","text":"<p>See <code>.github/workflows/flutter_ci.yml</code></p>"},{"location":"quality-assurance/automated-tests/","title":"Automated Tests","text":""},{"location":"quality-assurance/automated-tests/#test-types","title":"Test Types","text":"<ul> <li>Unit Tests</li> <li>Integration Tests</li> </ul>"},{"location":"quality-assurance/automated-tests/#running-tests","title":"Running Tests","text":"<pre><code>flutter test\n</code></pre>"},{"location":"quality-assurance/automated-tests/#coverage","title":"Coverage","text":"<ul> <li>Ensure &gt;80% coverage on business logic</li> </ul>"},{"location":"quality-assurance/quality-attribute-scenarios/","title":"Quality Attribute Scenarios","text":""},{"location":"quality-assurance/quality-attribute-scenarios/#functional-suitability","title":"Functional Suitability","text":""},{"location":"quality-assurance/quality-attribute-scenarios/#functional-correctness","title":"Functional Correctness","text":"<p>Functional correctness is the degree to which the software provides accurate results and behaves exactly as intended. It is a fundamental quality because software that behaves incorrectly is unusable.</p> <p>High correctness reduces bugs, improves reliability, and builds user trust.</p>"},{"location":"quality-assurance/quality-attribute-scenarios/#scenario-1-saving-a-valid-tour-entry","title":"Scenario 1: Saving a Valid Tour Entry","text":"<ul> <li>Source: Authorized user (e.g., tour manager)  </li> <li>Stimulus: User submits a form with valid data to create a new tour  </li> <li>Environment: Normal operation, database is accessible  </li> <li>Artifact: Tour management module and database  </li> <li>Response: System saves the tour and shows a success confirmation  </li> <li>Response Measure: Tour record appears in the database and user sees a success message within \u22642 seconds  </li> <li>How to Test: Create a tour using valid data via UI/API. Verify data in the database and check for confirmation message.</li> </ul>"},{"location":"quality-assurance/quality-attribute-scenarios/#scenario-2-handling-invalid-tour-input","title":"Scenario 2: Handling Invalid Tour Input","text":"<ul> <li>Source: User  </li> <li>Stimulus: User submits a form with invalid or missing fields  </li> <li>Environment: Normal operation  </li> <li>Artifact: Input validation logic and data storage layer  </li> <li>Response: Validation error is shown, and no data is saved  </li> <li>Response Measure: No new record in the database; user sees a clear error message  </li> <li>How to Test: Submit a form with empty/invalid fields. Confirm error message is shown and nothing is saved to the database.</li> </ul>"},{"location":"quality-assurance/quality-attribute-scenarios/#compatibility","title":"Compatibility","text":""},{"location":"quality-assurance/quality-attribute-scenarios/#interoperability","title":"Interoperability","text":"<p>Interoperability is the system's ability to communicate with other systems and exchange data. It\u2019s important to support external services like Telegram and avoid isolated systems.</p>"},{"location":"quality-assurance/quality-attribute-scenarios/#scenario-1-processing-a-request-from-telegram-bot","title":"Scenario 1: Processing a Request from Telegram Bot","text":"<ul> <li>Source: Telegram Bot  </li> <li>Stimulus: A user request (e.g., for tour info) sent via Telegram  </li> <li>Environment: System is deployed and accessible over the internet  </li> <li>Artifact: API endpoint for the bot  </li> <li>Response: The request is processed and a result is returned to the user via Telegram  </li> <li>Response Measure: Telegram user receives a response within \u22642 seconds; data is correct; system returns HTTP 200  </li> <li>How to Test: Send a request via Telegram or simulate it via webhook/Postman. Verify correct data and logs.</li> </ul>"},{"location":"quality-assurance/quality-attribute-scenarios/#scenario-2-sending-notification-to-telegram-user","title":"Scenario 2: Sending Notification to Telegram User","text":"<ul> <li>Source: System  </li> <li>Stimulus: Tour booking is confirmed  </li> <li>Environment: Internet connection and Telegram API are available  </li> <li>Artifact: Notification module  </li> <li>Response: Notification is sent to the user via Telegram  </li> <li>Response Measure: Message is received, HTTP 200 from Telegram API, message content is correct  </li> <li>How to Test: Trigger a booking confirmation. Check message delivery in Telegram and validate logs and API response.</li> </ul>"},{"location":"quality-assurance/quality-attribute-scenarios/#portability","title":"Portability","text":""},{"location":"quality-assurance/quality-attribute-scenarios/#adaptability","title":"Adaptability","text":"<p>Adaptability is the degree to which the software can be ported to other environments or changed for new needs with minimal effort. It ensures the system can scale or evolve over time.</p>"},{"location":"quality-assurance/quality-attribute-scenarios/#scenario-1-deploying-on-a-new-platform","title":"Scenario 1: Deploying on a New Platform","text":"<ul> <li>Source: Developer/Operations decision  </li> <li>Stimulus: System needs to be deployed on a new OS or hosting provider  </li> <li>Environment: Maintenance/setup phase; new environment is available  </li> <li>Artifact: Deployment scripts, configuration, and source code  </li> <li>Response: System runs correctly with minimal adjustments  </li> <li>Response Measure: &lt;5% code changes, &lt;1 hour downtime, all tests pass  </li> <li>How to Test: Install and run the system in the new environment. Record what needed to be changed and validate via automated tests.</li> </ul>"},{"location":"quality-assurance/quality-attribute-scenarios/#scenario-2-adding-a-new-notification-channel-eg-slack","title":"Scenario 2: Adding a New Notification Channel (e.g., Slack)","text":"<ul> <li>Source: New customer requirement or feature  </li> <li>Stimulus: Need to integrate a new notification service  </li> <li>Environment: Development phase; architecture allows for extensions  </li> <li>Artifact: Integration module  </li> <li>Response: New service added without refactoring; both integrations work  </li> <li>Response Measure: &lt;20 hours to implement; &lt;10 lines of existing code changed; tests pass  </li> <li>How to Test: Create a new integration module, test it with mock or real service, and ensure existing Telegram functionality still works.</li> </ul>"},{"location":"quality-assurance/user-acceptance-tests/","title":"User Acceptance Tests (UAT)","text":""},{"location":"quality-assurance/user-acceptance-tests/#scenarios","title":"Scenarios","text":"<ul> <li>As a user, I can log in</li> <li>As a user, I can view my profile</li> </ul>"},{"location":"quality-assurance/user-acceptance-tests/#acceptance-criteria","title":"Acceptance Criteria","text":"<ul> <li>Given/When/Then style</li> </ul>"},{"location":"quality-assurance/user-acceptance-tests/#feedback","title":"Feedback","text":"<ul> <li>Collected from client demos</li> </ul>"},{"location":"quality-attributes/quality-attribute-scenarios/","title":"Quality Attribute Scenarios","text":""},{"location":"quality-attributes/quality-attribute-scenarios/#performance","title":"Performance","text":"<ul> <li>The app should load within 3s on 4G</li> </ul>"},{"location":"quality-attributes/quality-attribute-scenarios/#security","title":"Security","text":"<ul> <li>User data should be encrypted</li> </ul>"},{"location":"quality-attributes/quality-attribute-scenarios/#usability","title":"Usability","text":"<ul> <li>Users should complete key tasks in under 3 clicks</li> </ul>"}]}